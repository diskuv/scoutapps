# Recommendation: Place this file in source control.
# Auto-generated by `./dk dksdk.project.new` of SquirrelScout.
#
# You can and should edit this file as you add dependencies.
# The auto-generated dependencies include a mix of C and OCaml
# to help you understand how to grab both types of dependencies.

include(DkSDKFetchContent)
include(DkSDKProject)
DkSDKProject_AddDependencies()

# ////// START OF SILLY SECTION.
# ////// Only required for `#include "dksdk_ffi_c/dksdk_ffi_c.h"`
# ////// in generic-ffi-main.c.
# ////// 
# ////// DkSDKRequire_Add(FFI OCaml PRERELEASE) 
# ////// or DkSDKRequire_Add(FFI C) should expose the C headers needed
# ////// by generic-ffi-main.c.

# --- Set dksdk-ffi-c_REPOSITORY

get_property(dksdk-ffi-c_REPOSITORY GLOBAL PROPERTY DKSDK_FFI_C_REPOSITORY)

# --- Fetch dksdk-ffi-c

DkSDKFetchContent_DeclareSecondParty(NAME dksdk-ffi-c
    GIT_REPOSITORY "${dksdk-ffi-c_REPOSITORY}"
    GIT_TAG main)
# MSVC Fatal error: Unsupported relocation kind 0003 for __GSHandlerCheck in _deps\dksdk-ffi-c-build\src\dksdk_ffi_c-StaticExports.lib(_deps\dksdk-ffi-c-build\src\CMakeFiles\dksdk_ffi_c-StaticExports.dir\sha256.c.obj)
function(do_fetch_dksdk_ffi_c)
    if(MSVC AND DKSDK_FFI_OCAML_MITIGATE_MSVC_RELOCATION_KIND_0003_COMPILE_OPTIONS)
        string(JOIN " " compileOptions ${DKSDK_FFI_OCAML_MITIGATE_MSVC_RELOCATION_KIND_0003_COMPILE_OPTIONS})
        string(APPEND CMAKE_C_FLAGS " ${compileOptions}")
    endif()

    DkSDKFetchContent_MakeAvailableNoInstall(dksdk-ffi-c)
endfunction()
do_fetch_dksdk_ffi_c()

# ////// END OF SILLY SECTION.

# --- Declare Dependencies ---

# >>> If you have any FetchContent_Declare(), this is the place
# >>> to put them.

# >>> If you have any DkSDKProject_DeclareAvailable(), this is the place
# >>> to put them.

# DkSDKProject_DeclareAvailable(capnp 
#     CONSTRAINT ">= 3.6.0"
#     FINDLIBS capnp 
# )

DkSDKProject_DeclareAvailable(qrc
    CONSTRAINT ">= 0.1.0"
    FINDLIBS qrc 
)

DkSDKProject_DeclareAvailable(ocamlbuild
    CONSTRAINT ">= 0.14.2"
    FINDLIBS ocamlbuildlib
)

DkSDKProject_DeclareAvailable(vector
    CONSTRAINT ">= 1.0.0"
    FINDLIBS vector 
)

DkSDKProject_DeclareAvailable(yojson
    CONSTRAINT ">= 2.1.0"
    FINDLIBS yojson 
)

# [core] is a Jane Street library. Jane Street, because it does not have a Windows
# test system, frequently has Windows problems. So DkSDK and DkML usually avoid
# Jane Street libraries except a few low-dependencies packages like [base] and
# some PPX libraries. Example: https://github.com/janestreet/core/pull/166
# ==> Avoid [core]!
DkSDKProject_DeclareAvailable(core
    CONSTRAINT ">= 0.16.0"
    FINDLIBS core base_for_tests command core_top filename_base heap_block univ_map validate 
)

DkSDKProject_DeclareAvailable(base64
    CONSTRAINT ">= 3.5.1"
    FINDLIBS base64
)

DkSDKProject_DeclareAvailable(xdg
    CONSTRAINT ">= 3.12.2"
    FINDLIBS xdg
)

DkSDKProject_DeclareAvailable(xdg
    CONSTRAINT ">= 3.12.2"
    FINDLIBS xdg
)

DkSDKProject_DeclareAvailable(fpath
    CONSTRAINT ">= 0.7.3"
    FINDLIBS fpath
)

DkSDKProject_DeclareAvailable(bos
    CONSTRAINT ">= 0.2.1"
    FINDLIBS bos
)

# --- Which Dependencies Will Be Available To Targets ---

# Using DkSDKProject_DeclareAvailable() alone does not pull it into CMake.
# You also have to use DkSDKProject_MakeAvailable(xxx FINDLIBS yyy) and use a
# target_link_libraries() on one of the `yyy`.
DkSDKProject_MakeAvailable(
        cmdliner
        fmt
        logs
        lwt

        capnp_ocaml
        qrc
        vector
        yojson
        core
        base64
        sqlite3
        xdg
        fpath
        bos
)
DkSDKFetchContent_MakeAvailableNoInstall(
        # "Build tools" that must run on the build host.
        # Implementation: Built by CMake directly.

        capnproto_and_host_tools
        capnproto_java_and_host_tools
)

DkSDKProject_MakeAvailable(TEST
        tezt)

add_subdirectory(zxing)

DkSDKRequire_Add(FFI OCaml)
